# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `sort.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module sorting
_M_sorting = Ice.openModule('sorting')
__name__ = 'sorting'

if 'Ordering' not in _M_sorting.__dict__:
    _M_sorting.Ordering = Ice.createTempClass()
    class Ordering(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Ordering.ASCENDING = Ordering("ASCENDING", 0)
    Ordering.DESCENDING = Ordering("DESCENDING", 1)
    Ordering._enumerators = { 0:Ordering.ASCENDING, 1:Ordering.DESCENDING }

    _M_sorting._t_Ordering = IcePy.defineEnum('::sorting::Ordering', Ordering, (), Ordering._enumerators)

    _M_sorting.Ordering = Ordering
    del Ordering

if '_t_LongList' not in _M_sorting.__dict__:
    _M_sorting._t_LongList = IcePy.defineSequence('::sorting::LongList', (), IcePy._t_long)

if '_t_StringList' not in _M_sorting.__dict__:
    _M_sorting._t_StringList = IcePy.defineSequence('::sorting::StringList', (), IcePy._t_string)

_M_sorting._t_Sort = IcePy.defineValue('::sorting::Sort', Ice.Value, -1, (), False, True, None, ())

if 'SortPrx' not in _M_sorting.__dict__:
    _M_sorting.SortPrx = Ice.createTempClass()
    class SortPrx(Ice.ObjectPrx):

        def sortList(self, ordering, context=None):
            return _M_sorting.Sort._op_sortList.invoke(self, ((ordering, ), context))

        def sortListAsync(self, ordering, context=None):
            return _M_sorting.Sort._op_sortList.invokeAsync(self, ((ordering, ), context))

        def begin_sortList(self, ordering, _response=None, _ex=None, _sent=None, context=None):
            return _M_sorting.Sort._op_sortList.begin(self, ((ordering, ), _response, _ex, _sent, context))

        def end_sortList(self, _r):
            return _M_sorting.Sort._op_sortList.end(self, _r)

        def setList(self, seq, context=None):
            return _M_sorting.Sort._op_setList.invoke(self, ((seq, ), context))

        def setListAsync(self, seq, context=None):
            return _M_sorting.Sort._op_setList.invokeAsync(self, ((seq, ), context))

        def begin_setList(self, seq, _response=None, _ex=None, _sent=None, context=None):
            return _M_sorting.Sort._op_setList.begin(self, ((seq, ), _response, _ex, _sent, context))

        def end_setList(self, _r):
            return _M_sorting.Sort._op_setList.end(self, _r)

        def getList(self, context=None):
            return _M_sorting.Sort._op_getList.invoke(self, ((), context))

        def getListAsync(self, context=None):
            return _M_sorting.Sort._op_getList.invokeAsync(self, ((), context))

        def begin_getList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_sorting.Sort._op_getList.begin(self, ((), _response, _ex, _sent, context))

        def end_getList(self, _r):
            return _M_sorting.Sort._op_getList.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_sorting.SortPrx.ice_checkedCast(proxy, '::sorting::Sort', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_sorting.SortPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::sorting::Sort'
    _M_sorting._t_SortPrx = IcePy.defineProxy('::sorting::Sort', SortPrx)

    _M_sorting.SortPrx = SortPrx
    del SortPrx

    _M_sorting.Sort = Ice.createTempClass()
    class Sort(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::sorting::Sort')

        def ice_id(self, current=None):
            return '::sorting::Sort'

        @staticmethod
        def ice_staticId():
            return '::sorting::Sort'

        def sortList(self, ordering, current=None):
            raise NotImplementedError("servant method 'sortList' not implemented")

        def setList(self, seq, current=None):
            raise NotImplementedError("servant method 'setList' not implemented")

        def getList(self, current=None):
            raise NotImplementedError("servant method 'getList' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_sorting._t_SortDisp)

        __repr__ = __str__

    _M_sorting._t_SortDisp = IcePy.defineClass('::sorting::Sort', Sort, (), None, ())
    Sort._ice_type = _M_sorting._t_SortDisp

    Sort._op_sortList = IcePy.Operation('sortList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_sorting._t_Ordering, False, 0),), (), None, ())
    Sort._op_setList = IcePy.Operation('setList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_sorting._t_LongList, False, 0),), (), None, ())
    Sort._op_getList = IcePy.Operation('getList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_sorting._t_LongList, False, 0), ())

    _M_sorting.Sort = Sort
    del Sort

_M_sorting._t_SortDefault = IcePy.defineValue('::sorting::SortDefault', Ice.Value, -1, (), False, True, None, ())

if 'SortDefaultPrx' not in _M_sorting.__dict__:
    _M_sorting.SortDefaultPrx = Ice.createTempClass()
    class SortDefaultPrx(Ice.ObjectPrx):

        def sortList(self, ordering, toSort, context=None):
            return _M_sorting.SortDefault._op_sortList.invoke(self, ((ordering, toSort), context))

        def sortListAsync(self, ordering, toSort, context=None):
            return _M_sorting.SortDefault._op_sortList.invokeAsync(self, ((ordering, toSort), context))

        def begin_sortList(self, ordering, toSort, _response=None, _ex=None, _sent=None, context=None):
            return _M_sorting.SortDefault._op_sortList.begin(self, ((ordering, toSort), _response, _ex, _sent, context))

        def end_sortList(self, _r):
            return _M_sorting.SortDefault._op_sortList.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_sorting.SortDefaultPrx.ice_checkedCast(proxy, '::sorting::SortDefault', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_sorting.SortDefaultPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::sorting::SortDefault'
    _M_sorting._t_SortDefaultPrx = IcePy.defineProxy('::sorting::SortDefault', SortDefaultPrx)

    _M_sorting.SortDefaultPrx = SortDefaultPrx
    del SortDefaultPrx

    _M_sorting.SortDefault = Ice.createTempClass()
    class SortDefault(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::sorting::SortDefault')

        def ice_id(self, current=None):
            return '::sorting::SortDefault'

        @staticmethod
        def ice_staticId():
            return '::sorting::SortDefault'

        def sortList(self, ordering, toSort, current=None):
            raise NotImplementedError("servant method 'sortList' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_sorting._t_SortDefaultDisp)

        __repr__ = __str__

    _M_sorting._t_SortDefaultDisp = IcePy.defineClass('::sorting::SortDefault', SortDefault, (), None, ())
    SortDefault._ice_type = _M_sorting._t_SortDefaultDisp

    SortDefault._op_sortList = IcePy.Operation('sortList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_sorting._t_Ordering, False, 0), ((), _M_sorting._t_LongList, False, 0)), (), ((), _M_sorting._t_LongList, False, 0), ())

    _M_sorting.SortDefault = SortDefault
    del SortDefault

_M_sorting._t_ObjectManager = IcePy.defineValue('::sorting::ObjectManager', Ice.Value, -1, (), False, True, None, ())

if 'ObjectManagerPrx' not in _M_sorting.__dict__:
    _M_sorting.ObjectManagerPrx = Ice.createTempClass()
    class ObjectManagerPrx(Ice.ObjectPrx):

        def listObjects(self, context=None):
            return _M_sorting.ObjectManager._op_listObjects.invoke(self, ((), context))

        def listObjectsAsync(self, context=None):
            return _M_sorting.ObjectManager._op_listObjects.invokeAsync(self, ((), context))

        def begin_listObjects(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_sorting.ObjectManager._op_listObjects.begin(self, ((), _response, _ex, _sent, context))

        def end_listObjects(self, _r):
            return _M_sorting.ObjectManager._op_listObjects.end(self, _r)

        def destroy(self, category, name, context=None):
            return _M_sorting.ObjectManager._op_destroy.invoke(self, ((category, name), context))

        def destroyAsync(self, category, name, context=None):
            return _M_sorting.ObjectManager._op_destroy.invokeAsync(self, ((category, name), context))

        def begin_destroy(self, category, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_sorting.ObjectManager._op_destroy.begin(self, ((category, name), _response, _ex, _sent, context))

        def end_destroy(self, _r):
            return _M_sorting.ObjectManager._op_destroy.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_sorting.ObjectManagerPrx.ice_checkedCast(proxy, '::sorting::ObjectManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_sorting.ObjectManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::sorting::ObjectManager'
    _M_sorting._t_ObjectManagerPrx = IcePy.defineProxy('::sorting::ObjectManager', ObjectManagerPrx)

    _M_sorting.ObjectManagerPrx = ObjectManagerPrx
    del ObjectManagerPrx

    _M_sorting.ObjectManager = Ice.createTempClass()
    class ObjectManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::sorting::ObjectManager')

        def ice_id(self, current=None):
            return '::sorting::ObjectManager'

        @staticmethod
        def ice_staticId():
            return '::sorting::ObjectManager'

        def listObjects(self, current=None):
            raise NotImplementedError("servant method 'listObjects' not implemented")

        def destroy(self, category, name, current=None):
            raise NotImplementedError("servant method 'destroy' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_sorting._t_ObjectManagerDisp)

        __repr__ = __str__

    _M_sorting._t_ObjectManagerDisp = IcePy.defineClass('::sorting::ObjectManager', ObjectManager, (), None, ())
    ObjectManager._ice_type = _M_sorting._t_ObjectManagerDisp

    ObjectManager._op_listObjects = IcePy.Operation('listObjects', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_sorting._t_StringList, False, 0), ())
    ObjectManager._op_destroy = IcePy.Operation('destroy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())

    _M_sorting.ObjectManager = ObjectManager
    del ObjectManager

# End of module sorting
