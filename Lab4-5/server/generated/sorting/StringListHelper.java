//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `sort.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package sorting;

/**
 * Helper class for marshaling/unmarshaling StringList.
 **/
public final class StringListHelper
{
    public static void write(com.zeroc.Ice.OutputStream ostr, java.util.List<java.lang.String> v)
    {
        if(v == null)
        {
            ostr.writeSize(0);
        }
        else
        {
            ostr.writeSize(v.size());
            for(String elem : v)
            {
                ostr.writeString(elem);
            }
        }
    }

    public static java.util.List<java.lang.String> read(com.zeroc.Ice.InputStream istr)
    {
        final java.util.List<java.lang.String> v;
        v = new java.util.LinkedList<String>();
        final int len0 = istr.readAndCheckSeqSize(1);
        for(int i0 = 0; i0 < len0; i0++)
        {
            String elem;
            elem = istr.readString();
            v.add(elem);
        }
        return v;
    }

    public static void write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<java.util.List<java.lang.String>> v)
    {
        if(v != null && v.isPresent())
        {
            write(ostr, tag, v.get());
        }
    }

    public static void write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.List<java.lang.String> v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            StringListHelper.write(ostr, v);
            ostr.endSize(pos);
        }
    }

    public static java.util.Optional<java.util.List<java.lang.String>> read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            java.util.List<java.lang.String> v;
            v = StringListHelper.read(istr);
            return java.util.Optional.of(v);
        }
        else
        {
            return java.util.Optional.empty();
        }
    }
}
